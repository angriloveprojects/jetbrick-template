${def?.class.name.toString()}
${xyz?.hashCode()}
${def.toString()?.left((byte)123f)}

亲爱的小伙伴们iBasically all lines (have) a leading 1+2;
x change to the RP_F #{} abcdefg#
亲爱的小伙伴们

=========================================
#define(List<String> asdadasd, long b)

#define(int i, long lv, Integer intV)
#define(List listObj, List<String> listStr)
##define(Map map)
#define(long[] arrlong, String[] arrStr)
#define(double a, char c)
#define(List<List<Map<?, String[]>[]>> llll)

#set(xxx=listStr[i++]))

#set(String aa="1+2", xxx=listStr[i++]))
${arrlong[1]}
${arrStr[1]}
${listObj[1]}
${map[str]}
${xyz}

=========================================
#if (a==b+(1*2<<3.0d))
    ammar, however, doesn't #compile(abc) with A
    haha ${a + b*123 - c}
#elseif (aa.valueOf(lv))
    haha ${a + b*123 - c}
    haha ${a + b*123 - c}
    haha ${a + b*123 - c*3%2}
#elseif (aa.substringAfter(aa)))
    haha ${a + b*123 - c}
    haha ${a + b*123 - c}
    haha ${a + b*123 - c*3%2}
#else()
   ammar, however, doesn't compile with A
#end
Thanks.

=========================================
#for(ss: listStr)
    block in for ${ss.charAt(1)}
#end

#for(Object aaaa: b)
    block in for
    #if (true)
        aaaa
    #else
        #break  
    #end
#else
    this is else in for
#end

#for(ac: map)
    block in for
    #break(ac.key)
    #continue(map.size())
#end

=========================================
escape Test
1. $ abc
2. # def
3. #abcdefg
4. #abcdefg(1+2)
5. \#stop()
7. \${1+2}
8. ${1+2}
9. $!{1+2}
10 #[
  sample ${1+2} XXXXXXX
]#

=========================================
comments test
1. ## aaaaaa #end;
2. #-- aadsad ## asdas
 asdasd
 ${1+2*3%2}  #if (aaa
   --# aaaaaaaaaaaaaaaaaaaaaaaaa

=========================================
string test
#stop("aaaaaa\n'aaaaaa" == 'aa"\ra')
${a}
